<?xml version="1.0" encoding="UTF-8"?>
<con:testCase zephyrTestName="" zephyrTestId="" wsrmVersion="1.0" wsrmEnabled="false" wsrmAckTo="" timeout="0" searchProperties="true" name="lol | password grant" keepSession="false" id="7a98a0a1-057a-4ff0-9895-ade175162bcd" failTestCaseOnErrors="true" failOnError="false" discardOkResults="false" disabled="true" amfPassword="" amfLogin="" amfEndpoint="" amfAuthorisation="false" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="7a98a0a1-057a-4ff0-9895-ade175162bcdfileName">lol-%7C-password-grant</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="calltestcase" name="Run | Get token (password)" id="baccd999-5374-41ff-aa65-84c78d9665a4">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>7a51e9e9-1495-4bac-8bc6-f44b9033f671</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>client</con:name>
          <con:value>${#TestCase#client}</con:value>
        </con:property>
        <con:property>
          <con:name>client-secret</con:name>
          <con:value>${#TestCase#client-secret}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>accessToken</con:name>
          <con:value>eyJraWQiOiJzMSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJjNmM1ZjBiZS0zMGIwLTViNDMtYWRiYS1jYmI3Y2I2MzM0ZjkiLCJzY3AiOlsib3BlbmlkIiwibG9sIl0sImNsbSI6WyJyZ25fV1JJTlQiLCJvcGVuaWQiLCJwdyIsImxvbCIsImFjY3RfZ250IiwiaWRfdG9rZW46cmduX1dSSU5UIiwiYWNjdCIsIiFGQUFDIl0sImRhdCI6eyJyIjoiV1JJTlQiLCJjIjoid3JpbnQiLCJ1IjoyNDgzNDU1MTQ4OTkxOTY4fSwiaXNzIjoiaHR0cHM6XC9cL2F1dGgud3ItaW50LnJwZy5yaW90Z2FtZXMuY29tIiwiZXhwIjoxNTk2MDYzMDEwLCJpYXQiOjE1OTYwNjI0MTAsImp0aSI6ImVaYjlvRnAtdGJjIiwiY2lkIjoidGVzdC1hdXRvbWF0aW9uLWxvbC13cmludCJ9.hMBGKIe5Gf2fXaj4QArITul2fPOItEoJccJiBfTZplwKDrpvoS4OHow3-5uSaN6f0n1WYkOsBOndTQRTZj6cbj6YtgbPxelyV_joiWWOS47BpIx0uvKCkuPu40bv_76hTQkNSHhWgteVturGHhXRRhO5nfu6nEjYj17bC3-z7Jbds7IWzwj50r1idjlruHvUbAC9MvJuaztMdpNQMWCatmglTlT8MGqiN4hYIHXLKRayBtcvuvEDst8hF4650dcYL9-9KHHPY71O184BRXorXioFdMPrPvWRk0Dl8S_l08EwpOSyLQBcm6ZtCczjCVwhO4GFOOUeqdiTSbtwcKl2Tw</con:value>
        </con:property>
        <con:property>
          <con:name>idToken</con:name>
          <con:value>eyJraWQiOiJzMSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiY2NEVTM3bUdHOXR3WWM3X0VSbTJVUSIsInN1YiI6ImM2YzVmMGJlLTMwYjAtNWI0My1hZGJhLWNiYjdjYjYzMzRmOSIsImF1ZCI6InRlc3QtYXV0b21hdGlvbi1sb2wtd3JpbnQiLCJjb3VudHJ5IjoidXNhIiwiYW1yIjpbInBhc3N3b3JkIl0sImlzcyI6Imh0dHBzOlwvXC9hdXRoLndyLWludC5ycGcucmlvdGdhbWVzLmNvbSIsImxvbCI6W3sidWlkIjoyNDgzNDU1MTQ4OTkxOTY4LCJjdWlkIjoyNDgzNDU1MTQ4OTkxOTY4LCJ1bmFtZSI6InJpcG1heHdyaW50IiwiY3BpZCI6IldSSU5UIiwicGlkIjoiV1JJTlQiLCJzdGF0ZSI6IkVOQUJMRUQifV0sImV4cCI6MTU5NjE0ODgxMCwiaWF0IjoxNTk2MDYyNDEwLCJhY2N0Ijp7ImdhbWVfbmFtZSI6IndyaW50ZXN0IiwidGFnX2xpbmUiOiJOQTEifSwibG9naW5fY291bnRyeSI6Im5hbiJ9.TqVwJlTW2PkJCzIdroSKXrwNhe7sbYO6D57UocEVzk3RsDI3tSAnWuwHrQ0cD7kZGvuunp-jA_ineAyC9IyGgU_SRApzplpumsgDi3JN2sBiWO5WUzkCPi4vBaDVeks85E9nvQCWQCDAyzTmWwPdMBxd3mNe_7O55qrNxe0-YtmYXX90XxxduWdoot4wptxQ8jYbw0xoJS8Ix4Y-F_5kbedqPhmnwwtREM2fyX7MRFKa9UFlfNOifBFWqiS5OOGFz4y6cZPSdKpy7tRXtYNdYhVFsQj7PC0QLIf7Fq48TIEp4AblLgcuSW9JyxDzCXPD2l_tyl0nGizIVwImnBDEGQ</con:value>
        </con:property>
        <con:property>
          <con:name>theUsername</con:name>
          <con:value>${#TestCase#username}</con:value>
        </con:property>
        <con:property>
          <con:name>thePassword</con:name>
          <con:value>${#TestCase#password}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties>
        <con:entry>accessToken</con:entry>
        <con:entry>idToken</con:entry>
      </con:returnProperties>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | accessToken" id="9d20d688-463f-40fa-b40f-c8b113e8bc92">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("accessToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded access token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | access token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | idToken" id="ed991933-b976-4c7b-9f11-e1da5284841f">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("idToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded ID token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | ID token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded access token" id="78f8d2ce-1190-4b63-b834-5512770816ff">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>cid</con:name>
          <con:value>test-automation-lol-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>clm[0]</con:name>
          <con:value>rgn_WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>clm[1]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>clm[2]</con:name>
          <con:value>pw</con:value>
        </con:property>
        <con:property>
          <con:name>clm[3]</con:name>
          <con:value>lol</con:value>
        </con:property>
        <con:property>
          <con:name>clm[4]</con:name>
          <con:value>acct_gnt</con:value>
        </con:property>
        <con:property>
          <con:name>clm[5]</con:name>
          <con:value>id_token:rgn_WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>clm[6]</con:name>
          <con:value>acct</con:value>
        </con:property>
        <con:property>
          <con:name>clm[7]</con:name>
          <con:value>!FAAC</con:value>
        </con:property>
        <con:property>
          <con:name>dat.c</con:name>
          <con:value>wrint</con:value>
        </con:property>
        <con:property>
          <con:name>dat.r</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>dat.u</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596063010</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062410</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>jti</con:name>
          <con:value>eZb9oFp-tbc</con:value>
        </con:property>
        <con:property>
          <con:name>scp[0]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>scp[1]</con:name>
          <con:value>lol</con:value>
        </con:property>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded ID token" id="9b84b505-f1f2-4a43-976c-f16e904f86f0">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>acct.game_name</con:name>
          <con:value>wrintest</con:value>
        </con:property>
        <con:property>
          <con:name>acct.tag_line</con:name>
          <con:value>NA1</con:value>
        </con:property>
        <con:property>
          <con:name>amr[0]</con:name>
          <con:value>password</con:value>
        </con:property>
        <con:property>
          <con:name>at_hash</con:name>
          <con:value>ccDU37mGG9twYc7_ERm2UQ</con:value>
        </con:property>
        <con:property>
          <con:name>aud</con:name>
          <con:value>test-automation-lol-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>country</con:name>
          <con:value>usa</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596148810</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062410</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>login_country</con:name>
          <con:value>nan</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].cpid</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].cuid</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].pid</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].state</con:name>
          <con:value>ENABLED</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].uid</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].uname</con:name>
          <con:value>ripmaxwrint</con:value>
        </con:property>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | access token | header" id="338673bb-6c47-457d-b6b3-0d2a279ecb78">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>e8ca7958-1411-47dc-a85e-007bd1830787</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | ID token | header" id="99a2df9b-b8fd-43e2-949e-09a44434e7ae">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>5343345c-d685-46c1-92df-234ba4e8fcbe</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify | access token | data" id="56c9a612-b093-47d8-8d57-8bba7aa06aac">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded access token")

// data
assert json.hasProperty("dat.r")
assert json.hasProperty("dat.u")
assert json.hasProperty("dat.p")
assert json.hasProperty("dat.c")

assert json.getPropertyCount() == 20</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify | ID token | data" id="8f886c19-0b05-40f5-9faf-941e6312b659">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded ID token")

// data
assert json.hasProperty("lol[0].cuid")
assert json.hasProperty("lol[0].uname")
assert json.hasProperty("lol[0].uid")
assert json.hasProperty("lol[0].cpid")
assert json.hasProperty("lol[0].ptrid")
assert json.hasProperty("lol[0].pid")
assert json.hasProperty("lol[0].state")

assert json.hasProperty("acct.game_name")
assert json.hasProperty("acct.tag_line")
assert json.hasProperty("country")
assert json.hasProperty("login_country")

assert json.getPropertyCount() == 18</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>client</con:name>
      <con:value>test-automation-lol-wrint</con:value>
    </con:property>
    <con:property>
      <con:name>client-secret</con:name>
      <con:value>OXy1vXNvKPSwhMmyUCHUKPRc_63_qm95k27rNiYuT60</con:value>
    </con:property>
    <con:property>
      <con:name>scope</con:name>
      <con:value>openid lol</con:value>
    </con:property>
    <con:property>
      <con:name>grant_type</con:name>
      <con:value>password</con:value>
    </con:property>
    <con:property>
      <con:name>username</con:name>
      <con:value>WRINT|ripmaxwrint</con:value>
    </con:property>
    <con:property>
      <con:name>password</con:name>
      <con:value>zxasqw12!@</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>4c23bc73-bdcf-4756-a996-958c308998aa</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>76bf8597-c586-4124-847e-35a13b5145c6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6f472e8d-e77f-4927-a70a-2075db5a0a42</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>bc5bf5f8-ff16-4b20-b67e-c134e873645b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>33432814-0417-404c-8833-53500521ab69</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>32b10550-d833-4fa3-8de8-67e5161266fd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9ecdf2d6-b2e2-40c5-b9af-b1055e3aeafe</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7f3f9479-4f43-4205-9d5f-8891826aa63a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>71c73346-aab0-462d-8458-7a949eda8cad</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b448fe75-a3f3-4355-b228-77fd8867746c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3eeb2fba-4a29-47ab-8b24-e74963f628c4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1f2e1d3d-fb98-48f2-af84-2a392ebdc609</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="b407e352-14e8-440f-bf25-abe254c02b61">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="cd04cfb9-4faf-4b69-9ec6-24af2181f7ae">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
