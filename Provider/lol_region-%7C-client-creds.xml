<?xml version="1.0" encoding="UTF-8"?>
<con:testCase zephyrTestName="" zephyrTestId="" wsrmVersion="1.0" wsrmEnabled="false" wsrmAckTo="" timeout="0" searchProperties="true" name="lol_region | client creds" keepSession="false" id="766eeb2d-6b9b-4e2f-b434-7b1cdd53737f" failTestCaseOnErrors="true" failOnError="false" discardOkResults="false" disabled="true" amfPassword="" amfLogin="" amfEndpoint="" amfAuthorisation="false" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="766eeb2d-6b9b-4e2f-b434-7b1cdd53737ffileName">lol_region-%7C-client-creds</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="calltestcase" name="Run | Get token (client creds)" id="bb1dd95a-d02c-43e2-a3cc-e6bad0973a7c">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>8808d750-7ca6-49f7-a2f7-38494af92449</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>client</con:name>
          <con:value>${#TestCase#client}</con:value>
        </con:property>
        <con:property>
          <con:name>client-secret</con:name>
          <con:value>${#TestCase#client-secret}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>accessToken</con:name>
          <con:value>eyJraWQiOiJzMSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJ0ZXN0LWF1dG9tYXRpb24tbG9scmVnaW9uLXdyaW50Iiwic2NwIjpbIm9wZW5pZCIsImxvbF9yZWdpb24iXSwiaXNzIjoiaHR0cHM6XC9cL2F1dGgud3ItaW50LnJwZy5yaW90Z2FtZXMuY29tIiwiZXhwIjoxNTk2MDY2MDI1LCJpYXQiOjE1OTYwNjI0MjUsImp0aSI6IlVVY0IwWXNQcndZIiwiY2lkIjoidGVzdC1hdXRvbWF0aW9uLWxvbHJlZ2lvbi13cmludCJ9.TvDhC1MR1o4D453A4q2YdzQD2fqDU3Fto-eIVUWXxUNBwX_DCOgVFEMUemn0k8GGLNKDFzOyKrYD7HDkG01QIc79P_FXYhQ7C1db9iGMXTA5FD_B-UEHu-s8tUboduN0jp8AfQEqD1fJTOx2u4AumDLo_VnqUQFXnP4_SDvazlhHaDMrGOce1Wdg_40hI45VRMLO07JPQlPTmRHuVAOf9j4qagQq_LhK-2ZL7SAot-7e6Fsl4isU9mZymhUxgzWPQKM7bUv50H6YHebt4Y4cdPwjD0YarhenNO68AozLzhriBPvHZlUOh6YTSNKucxt8H5UOXwZMMBGanAAFHbauzA</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties>
        <con:entry>accessToken</con:entry>
      </con:returnProperties>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | accessToken" id="f97a7d93-2a5b-47e5-96e1-1bf885184f21">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (client creds)"].getPropertyValue("accessToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded access token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | access token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded access token" id="d6365499-c606-439c-8478-1b8cbc692edf">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>cid</con:name>
          <con:value>test-automation-lolregion-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596066025</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062425</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>jti</con:name>
          <con:value>UUcB0YsPrwY</con:value>
        </con:property>
        <con:property>
          <con:name>scp[0]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>scp[1]</con:name>
          <con:value>lol_region</con:value>
        </con:property>
        <con:property>
          <con:name>sub</con:name>
          <con:value>test-automation-lolregion-wrint</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | access token | header" id="9b96d6f6-fbe3-4a7d-9298-c445795b28f7">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>e8ca7958-1411-47dc-a85e-007bd1830787</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:setupScript/>
  <con:properties>
    <con:property>
      <con:name>client</con:name>
      <con:value>test-automation-lolregion-wrint</con:value>
    </con:property>
    <con:property>
      <con:name>client-secret</con:name>
      <con:value>gyySo_VSNKxenrHat7uJhI7KxU0ahEIMM0F3x6k4Q4c</con:value>
    </con:property>
    <con:property>
      <con:name>scope</con:name>
      <con:value>openid lol_region</con:value>
    </con:property>
    <con:property>
      <con:name>grant_type</con:name>
      <con:value>client_credentials</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>4d8dc04f-8719-42fb-8152-d278a8fa527d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>fb6197eb-d56e-4770-9224-f3f4059daadc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>80029f7f-1745-4003-808e-4bd878eb3e4f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cd3ead2c-cee9-4e50-988d-007c1454e632</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>aa270974-9d50-4dd4-a468-fd5b47794c36</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>17878ce6-e031-4cf2-aea0-4ba6a29c4998</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>36b7888c-0e56-4877-90e1-293618fd99d0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="b407e352-14e8-440f-bf25-abe254c02b61">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="cd04cfb9-4faf-4b69-9ec6-24af2181f7ae">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
