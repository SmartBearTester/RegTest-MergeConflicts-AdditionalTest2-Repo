<?xml version="1.0" encoding="UTF-8"?>
<con:testCase zephyrTestName="" zephyrTestId="" wsrmVersion="1.0" wsrmEnabled="false" wsrmAckTo="" timeout="0" searchProperties="true" name="openid | password grant" keepSession="false" id="333310b6-e4b0-4ab7-8f43-b833b29f0518" failTestCaseOnErrors="true" failOnError="false" discardOkResults="false" disabled="true" amfPassword="" amfLogin="" amfEndpoint="" amfAuthorisation="false" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="333310b6-e4b0-4ab7-8f43-b833b29f0518fileName">openid-%7C-password-grant</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="calltestcase" name="Run | Get token (password)" id="dd90a232-d0cd-4e83-ad58-6f4dcd0fe5f5">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>7a51e9e9-1495-4bac-8bc6-f44b9033f671</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>client</con:name>
          <con:value>${#TestCase#client}</con:value>
        </con:property>
        <con:property>
          <con:name>client-secret</con:name>
          <con:value>${#TestCase#client-secret}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>accessToken</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>idToken</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>theUsername</con:name>
          <con:value>${#TestCase#username}</con:value>
        </con:property>
        <con:property>
          <con:name>thePassword</con:name>
          <con:value>${#TestCase#password}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties>
        <con:entry>accessToken</con:entry>
        <con:entry>idToken</con:entry>
      </con:returnProperties>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | accessToken" id="0039fa98-3fd4-4a44-ba1d-ae08710f79f8">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("accessToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded access token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | access token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | idToken" id="d131ecc6-5341-440c-a74b-5d0e805e7595">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("idToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded ID token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | ID token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded access token" id="993619be-a374-43a8-bcf3-e5f4b9c6f430">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>cid</con:name>
          <con:value>test-automation-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>clm[0]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>dat.c</con:name>
          <con:value>wrint</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596062996</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062396</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>jti</con:name>
          <con:value>bvXv1rLv7io</con:value>
        </con:property>
        <con:property>
          <con:name>scp[0]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded ID token" id="0c4bbfb8-52a6-4026-bf2f-c5d5b60ebe93">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>amr[0]</con:name>
          <con:value>password</con:value>
        </con:property>
        <con:property>
          <con:name>at_hash</con:name>
          <con:value>MV2CThZqRwzZWLcuVcB61A</con:value>
        </con:property>
        <con:property>
          <con:name>aud</con:name>
          <con:value>test-automation-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596148796</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062396</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | access token | header" id="444e88bf-44cf-4fd0-9ca1-98552b6e9921">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>e8ca7958-1411-47dc-a85e-007bd1830787</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify | access token | data" id="994b10b5-d2e2-4ada-b73f-3220f4a6cf93">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded access token")

// data
assert json.getPropertyCount() == 9</script>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | ID token | header" id="544cb033-3633-4403-91ef-7760f159712b">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>5343345c-d685-46c1-92df-234ba4e8fcbe</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify | ID token | data" id="c54dd90c-8df9-4749-8954-14fefff5a042">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded ID token")

// data
assert json.getPropertyCount() == 7</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>client</con:name>
      <con:value>QA</con:value>
    </con:property>
    <con:property>
      <con:name>client-secret</con:name>
      <con:value>aqPass</con:value>
    </con:property>
    <con:property>
      <con:name>scope</con:name>
      <con:value>openid</con:value>
    </con:property>
    <con:property>
      <con:name>grant_type</con:name>
      <con:value>password</con:value>
    </con:property>
    <con:property>
      <con:name>username</con:name>
      <con:value>US|ripambiguous93isksk</con:value>
    </con:property>
    <con:property>
      <con:name>password</con:name>
      <con:value>zxasqw12!@</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>4c23bc73-bdcf-4756-a996-958c308998aa</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>76bf8597-c586-4124-847e-35a13b5145c6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6f472e8d-e77f-4927-a70a-2075db5a0a42</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>bc5bf5f8-ff16-4b20-b67e-c134e873645b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>33432814-0417-404c-8833-53500521ab69</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>32b10550-d833-4fa3-8de8-67e5161266fd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9ecdf2d6-b2e2-40c5-b9af-b1055e3aeafe</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7f3f9479-4f43-4205-9d5f-8891826aa63a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>71c73346-aab0-462d-8458-7a949eda8cad</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b448fe75-a3f3-4355-b228-77fd8867746c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3eeb2fba-4a29-47ab-8b24-e74963f628c4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1a892b6e-f75a-4ed2-aaa6-9430564e95a7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cf92dc85-7451-4b12-8d89-3217bfb7a27e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>94dba3d1-0dd8-4e50-9673-2ac029c29e45</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="b407e352-14e8-440f-bf25-abe254c02b61">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="cd04cfb9-4faf-4b69-9ec6-24af2181f7ae">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
