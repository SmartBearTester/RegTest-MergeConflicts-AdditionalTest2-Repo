<?xml version="1.0" encoding="UTF-8"?>
<con:testCase zephyrTestName="" zephyrTestId="" wsrmVersion="1.0" wsrmEnabled="false" wsrmAckTo="" timeout="0" searchProperties="true" name="account | password grant" keepSession="false" id="46ca2206-a21d-4589-8886-fe8197f602e0" failTestCaseOnErrors="true" failOnError="false" discardOkResults="false" disabled="true" amfPassword="" amfLogin="" amfEndpoint="" amfAuthorisation="false" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="46ca2206-a21d-4589-8886-fe8197f602e0fileName">account-%7C-password-grant</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="Verify | ID token | data" id="6753c611-6412-47bf-9605-59d5a6188354">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded ID token")

// data
assert json.hasProperty("lol[0].cuid")
assert json.hasProperty("lol[0].uname")
assert json.hasProperty("lol[0].uid")
assert json.hasProperty("lol[0].cpid")
assert json.hasProperty("lol[0].ptrid")
assert json.hasProperty("lol[0].pid")
assert json.hasProperty("lol[0].state")

assert json.hasProperty("acct.game_name")
assert json.hasProperty("acct.tag_line")
assert json.hasProperty("country")
assert json.hasProperty("login_country")

assert json.getPropertyCount() == 18</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Verify | access token | data" id="84b163ed-d8b3-4dc5-848b-99a95fa413d6">
    <con:settings/>
    <con:config>
      <script>def json = testRunner.testCase.getTestStepByName("> Decoded access token")

// data
assert json.hasProperty("jti")

assert json.getPropertyCount() == 16</script>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | ID token | header" id="432c04dd-d4f5-4bed-b5df-03273027b771">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>5343345c-d685-46c1-92df-234ba4e8fcbe</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Verify | access token | header" id="83ba1a08-6739-458f-95c4-560e3f240948">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>e8ca7958-1411-47dc-a85e-007bd1830787</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties/>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded ID token" id="e577d9be-bfcc-40ca-ad2b-3a36a086eba7">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].uname</con:name>
          <con:value>ripmaxwrint</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].uid</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].state</con:name>
          <con:value>ENABLED</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].pid</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].cuid</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>lol[0].cpid</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>login_country</con:name>
          <con:value>nan</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062406</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596148806</con:value>
        </con:property>
        <con:property>
          <con:name>country</con:name>
          <con:value>usa</con:value>
        </con:property>
        <con:property>
          <con:name>aud</con:name>
          <con:value>test-automation-wrint</con:value>
        </con:property>
        <con:property>
          <con:name>at_hash</con:name>
          <con:value>bmTNE6yklV2u9dwSWbHNNQ</con:value>
        </con:property>
        <con:property>
          <con:name>amr[0]</con:name>
          <con:value>password</con:value>
        </con:property>
        <con:property>
          <con:name>acct.tag_line</con:name>
          <con:value>NA1</con:value>
        </con:property>
        <con:property>
          <con:name>acct.game_name</con:name>
          <con:value>wrintest</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="properties" name="> Decoded access token" id="95486d9c-6883-443b-8e3e-9a5c3ec9f532">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>sub</con:name>
          <con:value>c6c5f0be-30b0-5b43-adba-cbb7cb6334f9</con:value>
        </con:property>
        <con:property>
          <con:name>scp[1]</con:name>
          <con:value>account</con:value>
        </con:property>
        <con:property>
          <con:name>scp[0]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>jti</con:name>
          <con:value>pRNmP1JUJ8o</con:value>
        </con:property>
        <con:property>
          <con:name>iss</con:name>
          <con:value>https://auth.wr-int.rpg.riotgames.com</con:value>
        </con:property>
        <con:property>
          <con:name>iat</con:name>
          <con:value>1596062406</con:value>
        </con:property>
        <con:property>
          <con:name>exp</con:name>
          <con:value>1596063006</con:value>
        </con:property>
        <con:property>
          <con:name>dat.u</con:name>
          <con:value>2483455148991968</con:value>
        </con:property>
        <con:property>
          <con:name>dat.r</con:name>
          <con:value>WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>dat.c</con:name>
          <con:value>wrint</con:value>
        </con:property>
        <con:property>
          <con:name>clm[6]</con:name>
          <con:value>!FAAC</con:value>
        </con:property>
        <con:property>
          <con:name>clm[5]</con:name>
          <con:value>acct</con:value>
        </con:property>
        <con:property>
          <con:name>clm[4]</con:name>
          <con:value>id_token:rgn_WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>clm[3]</con:name>
          <con:value>acct_gnt</con:value>
        </con:property>
        <con:property>
          <con:name>clm[2]</con:name>
          <con:value>pw</con:value>
        </con:property>
        <con:property>
          <con:name>clm[1]</con:name>
          <con:value>openid</con:value>
        </con:property>
        <con:property>
          <con:name>clm[0]</con:name>
          <con:value>rgn_WRINT</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value>test-automation-wrint</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | idToken" id="241fce3b-24b6-48d4-96fb-51a13e3f6cae">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("idToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded ID token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | ID token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Decode | accessToken" id="38daf526-64cb-4b7c-b791-a75def84e016">
    <con:settings/>
    <con:config>
      <script>// create global library instance
globals = testRunner.testCase.testSuite.project.testSuites["Library"].testCases["lib"].testSteps["Globals"]
globals.run(testRunner, context)
def globals = context.globals

// decode token
def json = globals.DecodeToken(testRunner.testCase.testSteps["Run | Get token (password)"].getPropertyValue("accessToken"))

// clear properties
def decodedTokenTestStep = testRunner.testCase.getTestStepByName("> Decoded access token");
for( name in decodedTokenTestStep.propertyNames )
    decodedTokenTestStep.removeProperty( name )

def verifyTokenHeaderTestStep = context.testCase.testSuite.getTestCaseByName("Verify | access token | header").getTestStepByName("json")
for( name in verifyTokenHeaderTestStep.propertyNames )
    verifyTokenHeaderTestStep.removeProperty( name )
    
// populate data
json.each 
{
	key, value ->

	if (value in Map) {	
		for (i=0;  i &lt; value.size(); i++) {
			clm = value.keySet()[i]
			decodedTokenTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
			verifyTokenHeaderTestStep.setPropertyValue(key.toString() + "." + clm, value.get(clm).toString())
		}
	} else if (value in List) {
		for (i=0;  i &lt; value.size(); i++) {
			def element = value[i];

			if (element in Map)  {	
				for (j=0;  j &lt; element.size(); j++) {
					clm = element.keySet()[j]
					decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
					verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]" + "." + clm, element.get(clm).toString())
				}
			} else {
				decodedTokenTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
				verifyTokenHeaderTestStep.setPropertyValue(key.toString()+"["+i+"]", value[i].toString())
			}
		}
	} else {
		decodedTokenTestStep.setPropertyValue(key.toString(), value.toString())
		verifyTokenHeaderTestStep.setPropertyValue(key.toString(), value.toString())	
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="calltestcase" name="Run | Get token (password)" id="f75b6416-c973-4874-adbb-a3adcba2e65d">
    <con:settings/>
    <con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:targetTestCase>7a51e9e9-1495-4bac-8bc6-f44b9033f671</con:targetTestCase>
      <con:properties>
        <con:property>
          <con:name>thePassword</con:name>
          <con:value>${#TestCase#password}</con:value>
        </con:property>
        <con:property>
          <con:name>theUsername</con:name>
          <con:value>${#TestCase#username}</con:value>
        </con:property>
        <con:property>
          <con:name>idToken</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>accessToken</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>grant_type</con:name>
          <con:value>${#TestCase#grant_type}</con:value>
        </con:property>
        <con:property>
          <con:name>scope</con:name>
          <con:value>${#TestCase#scope}</con:value>
        </con:property>
        <con:property>
          <con:name>client-secret</con:name>
          <con:value>${#TestCase#client-secret}</con:value>
        </con:property>
        <con:property>
          <con:name>client</con:name>
          <con:value>${#TestCase#client}</con:value>
        </con:property>
      </con:properties>
      <con:returnProperties>
        <con:entry>idToken</con:entry>
        <con:entry>accessToken</con:entry>
      </con:returnProperties>
      <con:runMode>SINGLETON_AND_WAIT</con:runMode>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>password</con:name>
      <con:value>zxasqw12!@</con:value>
    </con:property>
    <con:property>
      <con:name>username</con:name>
      <con:value>US|ripambiguous93isksk</con:value>
    </con:property>
    <con:property>
      <con:name>grant_type</con:name>
      <con:value>password</con:value>
    </con:property>
    <con:property>
      <con:name>scope</con:name>
      <con:value>openid account</con:value>
    </con:property>
    <con:property>
      <con:name>client-secret</con:name>
      <con:value>aqPass</con:value>
    </con:property>
    <con:property>
      <con:name>client</con:name>
      <con:value>QA</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>99e9122e-534d-4ee1-955b-d8fa99019fa7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3eeb2fba-4a29-47ab-8b24-e74963f628c4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b448fe75-a3f3-4355-b228-77fd8867746c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>71c73346-aab0-462d-8458-7a949eda8cad</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>7f3f9479-4f43-4205-9d5f-8891826aa63a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9ecdf2d6-b2e2-40c5-b9af-b1055e3aeafe</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>32b10550-d833-4fa3-8de8-67e5161266fd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>33432814-0417-404c-8833-53500521ab69</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>bc5bf5f8-ff16-4b20-b67e-c134e873645b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6f472e8d-e77f-4927-a70a-2075db5a0a42</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>76bf8597-c586-4124-847e-35a13b5145c6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4c23bc73-bdcf-4756-a996-958c308998aa</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="cd04cfb9-4faf-4b69-9ec6-24af2181f7ae">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="b407e352-14e8-440f-bf25-abe254c02b61">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
